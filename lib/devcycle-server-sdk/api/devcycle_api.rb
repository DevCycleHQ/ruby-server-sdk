=begin
#DevCycle Bucketing API

#Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module DevCycle
  class DevcycleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all features by key for user data
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Feature>]
    def get_features(user_data, opts = {})
      data, _status_code, _headers = get_features_with_http_info(user_data, opts)
      data
    end

    # Get all features by key for user data
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Feature>, Integer, Hash)>] Hash<String, Feature> data, response status code and response headers
    def get_features_with_http_info(user_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevcycleApi.get_features ...'
      end
      # verify the required parameter 'user_data' is set
      if @api_client.config.client_side_validation && user_data.nil?
        fail ArgumentError, "Missing the required parameter 'user_data' when calling DevcycleApi.get_features"
      end
      # resource path
      local_var_path = '/v1/features'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_data)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Feature>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DevcycleApi.get_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevcycleApi#get_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get variable by key for user data
    # @param key [String] Variable key
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Variable]
    def get_variable_by_key(key, user_data, opts = {})
      data, _status_code, _headers = get_variable_by_key_with_http_info(key, user_data, opts)
      data
    end

    # Get variable by key for user data
    # @param key [String] Variable key
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Variable, Integer, Hash)>] Variable data, response status code and response headers
    def get_variable_by_key_with_http_info(key, user_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevcycleApi.get_variable_by_key ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DevcycleApi.get_variable_by_key"
      end
      # verify the required parameter 'user_data' is set
      if @api_client.config.client_side_validation && user_data.nil?
        fail ArgumentError, "Missing the required parameter 'user_data' when calling DevcycleApi.get_variable_by_key"
      end
      # resource path
      local_var_path = '/v1/variables/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_data)

      # return_type
      return_type = opts[:debug_return_type] || 'Variable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DevcycleApi.get_variable_by_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevcycleApi#get_variable_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all variables by key for user data
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Variable>]
    def get_variables(user_data, opts = {})
      data, _status_code, _headers = get_variables_with_http_info(user_data, opts)
      data
    end

    # Get all variables by key for user data
    # @param user_data [UserData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Variable>, Integer, Hash)>] Hash<String, Variable> data, response status code and response headers
    def get_variables_with_http_info(user_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevcycleApi.get_variables ...'
      end
      # verify the required parameter 'user_data' is set
      if @api_client.config.client_side_validation && user_data.nil?
        fail ArgumentError, "Missing the required parameter 'user_data' when calling DevcycleApi.get_variables"
      end
      # resource path
      local_var_path = '/v1/variables'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_data)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Variable>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DevcycleApi.get_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevcycleApi#get_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post events to DevCycle for user
    # @param user_data_and_events_body [UserDataAndEventsBody] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def post_events(user_data_and_events_body, opts = {})
      data, _status_code, _headers = post_events_with_http_info(user_data_and_events_body, opts)
      data
    end

    # Post events to DevCycle for user
    # @param user_data_and_events_body [UserDataAndEventsBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Integer, Hash)>] InlineResponse201 data, response status code and response headers
    def post_events_with_http_info(user_data_and_events_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevcycleApi.post_events ...'
      end
      # verify the required parameter 'user_data_and_events_body' is set
      if @api_client.config.client_side_validation && user_data_and_events_body.nil?
        fail ArgumentError, "Missing the required parameter 'user_data_and_events_body' when calling DevcycleApi.post_events"
      end
      # resource path
      local_var_path = '/v1/track'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_data_and_events_body)

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse201'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DevcycleApi.post_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevcycleApi#post_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
