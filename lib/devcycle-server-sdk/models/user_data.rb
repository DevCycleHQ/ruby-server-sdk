=begin
#DevCycle Bucketing API

#Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module DevCycle
  class UserData
    # Unique id to identify the user
    attr_accessor :user_id

    # User's email used to identify the user on the dashboard / target audiences
    attr_accessor :email

    # User's name used to identify the user on the dashboard / target audiences
    attr_accessor :name

    # User's language in ISO 639-1 format
    attr_accessor :language

    # User's country in ISO 3166 alpha-2 format
    attr_accessor :country

    # App Version of the running application
    attr_accessor :app_version

    # App Build number of the running application
    attr_accessor :app_build

    # User's custom data to target the user with, data will be logged to DevCycle for use in dashboard.
    attr_accessor :custom_data

    # User's custom data to target the user with, data will not be logged to DevCycle only used for feature bucketing.
    attr_accessor :private_custom_data

    # Date the user was created, Unix epoch timestamp format
    attr_accessor :created_date

    # Date the user was created, Unix epoch timestamp format
    attr_accessor :last_seen_date

    # Platform the Client SDK is running on
    attr_accessor :platform

    # Version of the platform the Client SDK is running on
    attr_accessor :platform_version

    # User's device model
    attr_accessor :device_model

    # DevCycle SDK type
    attr_accessor :sdk_type

    # DevCycle SDK Version
    attr_accessor :sdk_version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'user_id',
        :'email' => :'email',
        :'name' => :'name',
        :'language' => :'language',
        :'country' => :'country',
        :'app_version' => :'appVersion',
        :'app_build' => :'appBuild',
        :'custom_data' => :'customData',
        :'private_custom_data' => :'privateCustomData',
        :'created_date' => :'createdDate',
        :'last_seen_date' => :'lastSeenDate',
        :'platform' => :'platform',
        :'platform_version' => :'platformVersion',
        :'device_model' => :'deviceModel',
        :'sdk_type' => :'sdkType',
        :'sdk_version' => :'sdkVersion'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'email' => :'String',
        :'name' => :'String',
        :'language' => :'String',
        :'country' => :'String',
        :'app_version' => :'String',
        :'app_build' => :'String',
        :'custom_data' => :'Object',
        :'private_custom_data' => :'Object',
        :'created_date' => :'Float',
        :'last_seen_date' => :'Float',
        :'platform' => :'String',
        :'platform_version' => :'String',
        :'device_model' => :'String',
        :'sdk_type' => :'String',
        :'sdk_version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DevCycle::UserData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DevCycle::UserData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      self.set_default_platform_info()

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'app_version')
        self.app_version = attributes[:'app_version']
      end

      if attributes.key?(:'app_build')
        self.app_build = attributes[:'app_build']
      end

      if attributes.key?(:'custom_data')
        self.custom_data = attributes[:'custom_data']
      end

      if attributes.key?(:'private_custom_data')
        self.private_custom_data = attributes[:'private_custom_data']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      end

      if attributes.key?(:'last_seen_date')
        self.last_seen_date = attributes[:'last_seen_date']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'platform_version')
        self.platform_version = attributes[:'platform_version']
      end

      if attributes.key?(:'device_model')
        self.device_model = attributes[:'device_model']
      end

      if attributes.key?(:'sdk_type')
        self.sdk_type = attributes[:'sdk_type']
      end

      if attributes.key?(:'sdk_version')
        self.sdk_version = attributes[:'sdk_version']
      end
    end

    def set_default_platform_info
      self.sdk_type = 'server'
      self.sdk_version = VERSION
      self.platform = 'ruby'
      self.platform_version = RUBY_VERSION
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if !@language.nil? && @language.to_s.length > 2
        invalid_properties.push('invalid value for "language", the character length must be smaller than or equal to 2.')
      end

      if !@country.nil? && @country.to_s.length > 2
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 2.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @user_id.nil?
      return false if !@language.nil? && @language.to_s.length > 2
      return false if !@country.nil? && @country.to_s.length > 2
      sdk_type_validator = EnumAttributeValidator.new('String', ["api", "server"])
      return false unless sdk_type_validator.valid?(@sdk_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] language Value to be assigned
    def language=(language)
      if !language.nil? && language.to_s.length > 2
        fail ArgumentError, 'invalid value for "language", the character length must be smaller than or equal to 2.'
      end

      @language = language
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.length > 2
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 2.'
      end

      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sdk_type Object to be assigned
    def sdk_type=(sdk_type)
      validator = EnumAttributeValidator.new('String', ["api", "server"])
      unless validator.valid?(sdk_type)
        fail ArgumentError, "invalid value for \"sdk_type\", must be one of #{validator.allowable_values}."
      end
      @sdk_type = sdk_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          email == o.email &&
          name == o.name &&
          language == o.language &&
          country == o.country &&
          app_version == o.app_version &&
          app_build == o.app_build &&
          custom_data == o.custom_data &&
          private_custom_data == o.private_custom_data &&
          created_date == o.created_date &&
          last_seen_date == o.last_seen_date &&
          platform == o.platform &&
          platform_version == o.platform_version &&
          device_model == o.device_model &&
          sdk_type == o.sdk_type &&
          sdk_version == o.sdk_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, email, name, language, country, app_version, app_build, custom_data, private_custom_data, created_date, last_seen_date, platform, platform_version, device_model, sdk_type, sdk_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DevCycle.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
